class Game:
    """
    Класс, описывающий базовый класс для игры. Для описания своей собственной игры,
    унаследуйте этот класс и опишите функции, данные ниже. Игра должна быть
    антогонистической и пошаговой.

    Для идентификации игроков используйте 1 для первого игрока (player1) и
    -1 для второго игрока (player2).

    Примеры:
      othello/OthelloGame.py
      tic_tac_toe/TicTacToeGame.py
    """
    def __init__(self):
        pass

    def getInitBoard(self):
        """
        Returns:
            startBoard:
                Представление доски. Идеально, если эта форма будет формой, подающейся
                на вход нейронной сети.
        """
        pass

    def getBoardSize(self):
        """
        Returns:
            (x, y): Кортеж размерностей доски.
        """
        pass

    def getActionSize(self):
        """
        Returns:
            actionSize: Количество всех возможных действий.
        """
        pass

    def getNextState(self, board, player, action):
        """
        Input:
            board: Текущая доска.
            player: Текущий игрок (1 или -1).
            action: Действие, совершаемое текущим игроком.

        Returns:
            nextBoard: Доска, после совершения действия action.
            nextPlayer:
                Игрок, который должен играть следующим ходом (должен быть -player).
        """
        pass

    def getValidMoves(self, board, player):
        """
        Input:
            board: Текущая доска.
            player: Текущий игрок.

        Returns:
            validMoves:
                Двичный вектор длины self.getActionSize(), в котором
                1 (единицей) обозначены ходы, допустимые для данной доски
                и данного игрока, а 0 - недопустимые ходы.
        """
        pass

    def getGameEnded(self, board, player):
        """
        Input:
            board: Текущая доска.
            player: Текущий игрок (1 или -1)

        Returns:
            r: 0 если игра не закончена. 1 если игрок (player) выигрывает, -1 если игрок (player) проигрывает.
        """
        pass

    def getCanonicalForm(self, board, player):
        """
        Input:
            board: Текущая доска.
            player: Текущий игрок. (1 или -1)

        Returns:
            canonicalBoard:
                Возвращает каноническую форму доски. Каноническая форма доски
                должна быть независима от текущего игрока. Она всегда должна
                быть представлена от лица первого игрока. Например, для реверси,
                если доска представлена для белого игрока, то с ней ничего не нужно
                делать, а если для черного, то нужно инвертировать ее так, чтобы
                ходы черного стали ходами белого. Это нужно для инициализации новой
                игры, которая будет начинаться с данного хода.
        """
        pass

    def getSymmetries(self, board, pi):
        """
        Input:
            board: Текущая доска.
            pi: Вектор вероятностей (политик) длины self.getActionSize().

        Returns:
            symmForms:
                Список кортежей (board, pi), в котором каждый кортеж представляет симметричную форму доски
                и соответствующий вектор pi. Данный метод используется для тренировки нейронной сети на примерах.
        """
        pass

    def stringRepresentation(self, board):
        """
        Input:
            board: Текущая доска.

        Returns:
            boardString:
                Быстрое преобразование доски в строковый формат.
                Используется в MCTS.
        """
        pass
